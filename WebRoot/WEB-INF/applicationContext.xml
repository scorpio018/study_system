<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
	xmlns:mvc="http://www.springframework.org/schema/mvc"
	xmlns:p="http://www.springframework.org/schema/p" 
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:aop="http://www.springframework.org/schema/aop" 
	xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="http://www.springframework.org/schema/beans 
		http://www.springframework.org/schema/beans/spring-beans-4.1.xsd 
		http://www.springframework.org/schema/context 
		http://www.springframework.org/schema/context/spring-context-4.1.xsd 
		http://www.springframework.org/schema/aop 
		http://www.springframework.org/schema/aop/spring-aop-4.1.xsd 
		http://www.springframework.org/schema/tx 
		http://www.springframework.org/schema/tx/spring-tx-4.1.xsd 
		http://www.springframework.org/schema/mvc 
		http://www.springframework.org/schema/mvc/spring-mvc-4.1.xsd">

	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="dataSource" />
		<!-- <property name="mapperLocations" value="classpath:config/mybatis/mysql/mapper/*Mapper.xml" /> -->
		<property name="configLocation" value="/WEB-INF/classes/sqlMapConfig.xml"/>
		<property name="typeAliasesPackage" value="com.study.core.vo" />
		<property name="typeAliasesSuperType" value="java.io.Serializable"></property>
	</bean>
	<!-- <bean id="UserMapper" class="org.mybatis.spring.mapper.MapperFactoryBean"> 
		<property name="mapperInterface" value="cn.com.enorth.test.mapper.UserMapper" 
		/> <property name="sqlSessionFactory" ref="sqlSessionFactory" /> </bean> -->

	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<property name="basePackage" value="com.study.core.mapper" />
	</bean>

	<bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource"
		destroy-method="close">
		<property name="driverClass" value="com.mysql.jdbc.Driver" />
		<property name="jdbcUrl" value="jdbc:mysql://10.0.10.71:3306/exam_system?charset=utf8" />
		<property name="user" value="root" />
		<property name="password" value="123456" />
		<!--连接池中保留的最小连接数。 -->
		<property name="minPoolSize" value="10" />
		<!--连接池中保留的最大连接数。Default: 15 -->
		<property name="maxPoolSize" value="100" />
		<!--最大空闲时间,1800秒内未使用则连接被丢弃。若为0则永不丢弃。Default: 0 -->
		<property name="maxIdleTime" value="1800" />
		<!--当连接池中的连接耗尽的时候c3p0一次同时获取的连接数。Default: 3 -->
		<property name="acquireIncrement" value="3" />
		<property name="maxStatements" value="1000" />
		<property name="initialPoolSize" value="10" />
		<!--每60秒检查所有连接池中的空闲连接。Default: 0 -->
		<property name="idleConnectionTestPeriod" value="60" />
		<property name="maxStatementsPerConnection" value="100" />
		<!--定义在从数据库获取新连接失败后重复尝试的次数。Default: 30 -->
		<property name="acquireRetryAttempts" value="10" />
		<property name="breakAfterAcquireFailure" value="false" />
		<property name="testConnectionOnCheckout" value="false" />
	</bean>
	<!-- 开启注解 -->
	<mvc:annotation-driven>
        <mvc:message-converters register-defaults="true">
            <bean class="org.springframework.http.converter.StringHttpMessageConverter">
                <constructor-arg value="UTF-8" />
            </bean>
            <bean class="org.springframework.http.converter.json.MappingJackson2HttpMessageConverter">
                <property name="objectMapper">
                     <bean class="org.springframework.http.converter.json.Jackson2ObjectMapperFactoryBean">
                         <property name="failOnEmptyBeans" value="false" />
                     </bean>
                 </property>
            </bean>
        </mvc:message-converters>
    </mvc:annotation-driven>
	<!-- 扫描注解包 -->
	<context:component-scan base-package="com.study.core">
		<context:include-filter type="annotation" expression="org.aspectj.lang.annotation.Aspect"/>
	</context:component-scan>
	<!-- 静态文件访问图片-->
	<mvc:resources location="/images/" mapping="/images/**" />
	<!-- 静态文件访问js-->
	<mvc:resources location="/js/" mapping="/js/**" />
	<!-- 静态文件访问css-->
	<mvc:resources location="/css/" mapping="/css/**" />
	<!-- 静态文件访问404页面-->
	<mvc:resources location="/exception/" mapping="/exception/**" />
	<!-- 静态文件访问html页面-->
	<mvc:resources location="/html/" mapping="/html/**" />
	
	<!-- Freemarker配置   
	<bean id="freemarkerConfig"  
      	class="org.springframework.web.servlet.view.freemarker.FreeMarkerConfigurer">  
    	<property name="templateLoaderPath" value="/freeMarkerView/" />  
    	<property name="freemarkerSettings">  
        	<props>  
            	<prop key="template_update_delay">0</prop>  
            	<prop key="default_encoding">UTF-8</prop>  
            	<prop key="number_format">0.##########</prop>  
            	<prop key="datetime_format">yyyy-MM-dd HH:mm:ss</prop>  
            	<prop key="classic_compatible">true</prop>  
            	<prop key="template_exception_handler">ignore</prop>  
        	</props>  
    	</property>  
	</bean>-->
	
	<!-- aop实现事务代码 start -->
	<bean id="transactionManager"
    	  class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
    	  <property name="dataSource">
    	  		<ref bean="dataSource"/>
    	  </property>
    </bean>
    
    <!-- 验证码配置 -->
	<bean id="captchaProducer" class="com.google.code.kaptcha.impl.DefaultKaptcha" scope="singleton">  
        <property name="config">  
            <bean class="com.google.code.kaptcha.util.Config">  
                <constructor-arg>  
                    <props>  
                        <prop key="kaptcha.border">yes</prop>  
                        <prop key="kaptcha.image.width">94</prop>  
                        <prop key="kaptcha.image.height">35</prop>  
                        <prop key="kaptcha.textproducer.font.size">25</prop>  
                        <prop key="kaptcha.session.key">code</prop>  
                        <prop key="kaptcha.textproducer.char.length">4</prop>
                        <prop key="kaptcha.textproducer.char.string">abcdefghjkmnpqrstuvwxyz123456789ABCDEFGHJKMNPQRSTUVWXYZ</prop>  
                        
                    </props>  
                </constructor-arg>  
            </bean>  
        </property>  
    </bean>
    
    <!-- <tx:annotation-driven transaction-manager="transactionManager" /> -->
    
    <tx:advice id="txAdvice" transaction-manager="transactionManager">
    	<tx:attributes>
    		<tx:method name="get*" read-only="true"/>
    		<!-- <tx:method name="add*" propagation="REQUIRED" rollback-for="exception/exp500"/>
    		<tx:method name="update*" propagation="REQUIRED" rollback-for="exception/exp500"/>
    		<tx:method name="insert*" propagation="REQUIRED" rollback-for="exception/exp500"/>
    		<tx:method name="save*" propagation="REQUIRED" rollback-for="exception/exp500"/> -->
    		<tx:method name="*" propagation="REQUIRED" rollback-for="exception/exp500"/>
    	</tx:attributes>
    </tx:advice>
    
    <aop:config>
    	<aop:pointcut expression="execution(* com.study.core.controller.*.*Controller.*(..))" id="myPointcut"/>
    	<aop:advisor advice-ref="txAdvice" pointcut-ref="myPointcut"/>
    </aop:config>
    
    
    <context:annotation-config/>
    
    <!-- <mvc:interceptors>
    	session超时
    	<mvc:interceptor>
    		<mvc:mapping path="/*/*/**"/>
    		<bean class="cn.com.enorth.govopen.interceptor.LoginInterceptor">
    			<property name="allowUrls">
    				<list>
    					如果请求中包含以下路径，则不进行拦截
    					<value>/login</value>
    					<value>/html</value>
    					<value>/entry</value>
    					<value>/exception</value>
    					<value>/index.jsp</value>
    					<value>/on</value>
    					<value>/css</value>
    					<value>/js</value>
    					<value>/images</value>
    					<value>/www</value>    					
    				</list>
    			</property>
    		</bean>
    	</mvc:interceptor>
    </mvc:interceptors> -->
    <aop:aspectj-autoproxy/>
    
	<!-- aop实现事务代码 end -->
	
	<!-- 配置PropertiesFactoryBean实例类 -->
	<!-- <bean id="configProperties" class="org.springframework.beans.factory.config.PropertiesFactoryBean">
        <property name="locations">
            <list>
                <value>classpath*:config/main.properties</value>
            </list>
        </property>
    </bean> -->
    
    <!-- 注入property实例 -->
    <!-- <bean id="propertyConfigurer" class="org.springframework.beans.factory.config.PreferencesPlaceholderConfigurer">
        <property name="properties" ref="configProperties" />
    </bean> -->
    
	<bean id="viewResolver" class="org.springframework.web.servlet.view.InternalResourceViewResolver" >
		<property name="prefix" value="/" />
		<property name="suffix" value=".jsp" />
		<!-- <property name="order" value="1" /> -->
	</bean>

	<!-- freeMarkerViewResolver  
	<bean id="freeMarkerViewResolver" class="org.springframework.web.servlet.view.freemarker.FreeMarkerViewResolver">  
    	<property name="prefix" value="/" />
    	<property name="suffix" value=".ftl" />  
    	<property name="contentType" value="text/html;charset=UTF-8" />
    	<property name="order" value="0" />
	</bean> -->
	
	<bean id="multipartResolver" class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
		<!--默认编码 -->
		<property name="defaultEncoding" value="utf-8" />
		<!--最大文件大小 30M 31457280 -->
	    <property name="maxUploadSize" value="10485760000" />
		<!--最大内存大小-->
	    <property name="maxInMemorySize" value="40960" />
	</bean>
	
	<!-- <bean id="exceptionResolver" class="org.springframework.web.servlet.handler.SimpleMappingExceptionResolver">
		<property name="exceptionMappings">
			<props>
				<prop key="java.lang.Exception">exception/exp500</prop>
				<prop key="java.lang.Throwable">exception/exp500</prop>
			</props>
		</property>
		<property name="statusCodes">
			<props>
				<prop key="exception/exp500">500</prop>
				<prop key="exception/exp404">404</prop>
			</props>
		</property>
		默认错误页面，当找不到上面mappings中指定的异常对应视图时，使用本默认配置 
		<property name="defaultErrorView" value="exception/exp404"></property>
		默认HTTP状态码
		<property name="defaultStatusCode" value="404"></property> 
	</bean> -->
	
	
	<!-- 该 BeanPostProcessor 将自动起作用，对标注 @Autowired 的 Bean 进行自动注入 -->  
    <bean class="org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor"/>  
    
</beans>